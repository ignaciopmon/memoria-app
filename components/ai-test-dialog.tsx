// components/ai-test-dialog.tsx
"use client"

import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Sparkles, Loader2, CheckCircle, XCircle } from "lucide-react"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Card, CardContent } from "./ui/card"

type CardData = {
  id: string;
  front: string;
  back: string;
  last_rating: number | null;
};

interface AITestDialogProps {
  deckId: string;
  cards: CardData[];
  children: React.ReactNode;
}

// Tipos para el test que recibimos de la IA
type TestQuestion = {
  question: string;
  options: { [key: string]: string };
  answer: string;
};

export function AITestDialog({ deckId, cards, children }: AITestDialogProps) {
  const [open, setOpen] = useState(false);
  const [testState, setTestState] = useState<'options' | 'loading' | 'taking_test' | 'results'>('options');
  const [questions, setQuestions] = useState<TestQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [userAnswers, setUserAnswers] = useState<(string | null)[]>([]);
  const [error, setError] = useState<string | null>(null);

  const handleGenerateTest = async () => {
    setTestState('loading');
    setError(null);
    try {
      const response = await fetch('/api/generate-test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ cards }),
      });

      if (!response.ok) {
        throw new Error('Failed to generate the test from the server.');
      }

      const testData: TestQuestion[] = await response.json();
      setQuestions(testData);
      setUserAnswers(new Array(testData.length).fill(null));
      setCurrentQuestionIndex(0);
      setTestState('taking_test');
    } catch (err) {
      setError(err instanceof Error ? err.message : "An unknown error occurred.");
      setTestState('options');
    }
  };

  const handleAnswerSelect = (answer: string) => {
    const newAnswers = [...userAnswers];
    newAnswers[currentQuestionIndex] = answer;
    setUserAnswers(newAnswers);
  };
  
  const goToNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      setTestState('results');
    }
  };

  const resetTest = () => {
    setTestState('options');
    setQuestions([]);
    setUserAnswers([]);
    setCurrentQuestionIndex(0);
    setError(null);
  };
  
  const score = userAnswers.reduce((correct, userAnswer, index) => {
    return userAnswer === questions[index]?.answer ? correct + 1 : correct;
  }, 0);

  return (
    <Dialog open={open} onOpenChange={(isOpen) => { setOpen(isOpen); if (!isOpen) resetTest(); }}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-purple-500" />
            AI Generated Test
          </DialogTitle>
          <DialogDescription>
             Test your knowledge with a custom quiz generated by AI.
          </DialogDescription>
        </DialogHeader>

        {testState === 'options' && (
          <div className="py-4">
            <h3 className="mb-2 text-lg font-medium">Ready to start?</h3>
            <p className="text-muted-foreground mb-6">
              The AI will generate a 5-question multiple-choice test focusing on the cards you find most difficult.
            </p>
             {error && <p className="mb-4 text-sm text-destructive">{error}</p>}
            <div className="flex justify-end">
               <Button onClick={handleGenerateTest}>Start Test</Button>
            </div>
          </div>
        )}

        {testState === 'loading' && (
           <div className="flex flex-col items-center justify-center py-12">
            <Loader2 className="mb-4 h-12 w-12 animate-spin text-purple-500" />
            <p className="text-muted-foreground">Generating your test, please wait...</p>
          </div>
        )}

        {testState === 'taking_test' && questions.length > 0 && (
          <div className="py-4">
            <p className="mb-4 text-sm text-muted-foreground">Question {currentQuestionIndex + 1} of {questions.length}</p>
            <Card>
              <CardContent className="p-6">
                <h4 className="mb-6 text-lg font-semibold">{questions[currentQuestionIndex].question}</h4>
                <RadioGroup value={userAnswers[currentQuestionIndex] || ''} onValueChange={handleAnswerSelect}>
                  {Object.entries(questions[currentQuestionIndex].options).map(([key, value]) => (
                    <div key={key} className="flex items-center space-x-3 rounded-md border p-3">
                      <RadioGroupItem value={key} id={`q${currentQuestionIndex}-opt${key}`} />
                      <Label htmlFor={`q${currentQuestionIndex}-opt${key}`} className="flex-1 cursor-pointer">{value}</Label>
                    </div>
                  ))}
                </RadioGroup>
              </CardContent>
            </Card>
            <div className="mt-6 flex justify-end">
              <Button onClick={goToNextQuestion} disabled={userAnswers[currentQuestionIndex] === null}>
                {currentQuestionIndex < questions.length - 1 ? "Next Question" : "Finish Test"}
              </Button>
            </div>
          </div>
        )}

         {testState === 'results' && (
          <div className="py-4 text-center">
            <h3 className="text-2xl font-bold">Test Complete!</h3>
            <p className="text-muted-foreground">You scored:</p>
            <p className="my-4 text-6xl font-bold text-purple-500">{score} <span className="text-3xl text-muted-foreground">/ {questions.length}</span></p>
             <div className="mt-8 space-y-4 max-h-60 overflow-y-auto pr-3 text-left">
                {questions.map((q, index) => (
                  <div key={index} className="rounded-md border p-3">
                    <p className="font-semibold">{index + 1}. {q.question}</p>
                    <div className="mt-2 text-sm">
                      {userAnswers[index] === q.answer ? (
                         <div className="flex items-center gap-2 text-green-600">
                           <CheckCircle className="h-4 w-4" />
                           <span>Your answer: {q.options[userAnswers[index]!]}</span>
                         </div>
                      ) : (
                        <>
                          <div className="flex items-center gap-2 text-destructive">
                           <XCircle className="h-4 w-4" />
                           <span>Your answer: {userAnswers[index] ? q.options[userAnswers[index]!] : "No answer"}</span>
                         </div>
                          <div className="flex items-center gap-2 text-green-600 mt-1 pl-6">
                           <span>Correct: {q.options[q.answer]}</span>
                         </div>
                        </>
                      )}
                    </div>
                  </div>
                ))}
            </div>
            <div className="mt-8 flex justify-end gap-2">
              <Button variant="outline" onClick={resetTest}>Try Again</Button>
              <Button onClick={() => setOpen(false)}>Close</Button>
            </div>
          </div>
        )}

      </DialogContent>
    </Dialog>
  )
}